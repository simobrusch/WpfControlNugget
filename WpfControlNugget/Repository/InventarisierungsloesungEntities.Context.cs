//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WpfControlNugget.Repository
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class InventarisierungsloesungEntitiesNew : DbContext
    {
        public InventarisierungsloesungEntitiesNew()
            : base("name=InventarisierungsloesungEntitiesNew")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<abrechnung> abrechnungs { get; set; }
        public virtual DbSet<address> addresses { get; set; }
        public virtual DbSet<contact> contacts { get; set; }
        public virtual DbSet<credential> credentials { get; set; }
        public virtual DbSet<customer> customers { get; set; }
        public virtual DbSet<device> devices { get; set; }
        public virtual DbSet<deviceport> deviceports { get; set; }
        public virtual DbSet<devicetype> devicetypes { get; set; }
        public virtual DbSet<devicetype_has_operatingsystem> devicetype_has_operatingsystem { get; set; }
        public virtual DbSet<@interface> interfaces { get; set; }
        public virtual DbSet<kundenkonto> kundenkontoes { get; set; }
        public virtual DbSet<location> locations { get; set; }
        public virtual DbSet<log> logs { get; set; }
        public virtual DbSet<network> networks { get; set; }
        public virtual DbSet<operatingsystem> operatingsystems { get; set; }
        public virtual DbSet<person> people { get; set; }
        public virtual DbSet<pointofdelivery> pointofdeliveries { get; set; }
        public virtual DbSet<produkte> produktes { get; set; }
        public virtual DbSet<produktegruppe> produktegruppes { get; set; }
        public virtual DbSet<softwaredienstleistung> softwaredienstleistungs { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<town> towns { get; set; }
        public virtual DbSet<transportmedium> transportmediums { get; set; }
        public virtual DbSet<v_logentries> v_logentries { get; set; }
    
        public virtual int LogClear(Nullable<int> p_logentries_id)
        {
            var p_logentries_idParameter = p_logentries_id.HasValue ?
                new ObjectParameter("p_logentries_id", p_logentries_id) :
                new ObjectParameter("p_logentries_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LogClear", p_logentries_idParameter);
        }
    
        public virtual int LogMessageAdd(string i_pod, string i_hostname, Nullable<int> i_severity, string i_message)
        {
            var i_podParameter = i_pod != null ?
                new ObjectParameter("i_pod", i_pod) :
                new ObjectParameter("i_pod", typeof(string));
    
            var i_hostnameParameter = i_hostname != null ?
                new ObjectParameter("i_hostname", i_hostname) :
                new ObjectParameter("i_hostname", typeof(string));
    
            var i_severityParameter = i_severity.HasValue ?
                new ObjectParameter("i_severity", i_severity) :
                new ObjectParameter("i_severity", typeof(int));
    
            var i_messageParameter = i_message != null ?
                new ObjectParameter("i_message", i_message) :
                new ObjectParameter("i_message", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LogMessageAdd", i_podParameter, i_hostnameParameter, i_severityParameter, i_messageParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
